name: Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security checks weekly on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-check:
    name: Dependency Vulnerability Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Run security audit
      run: yarn audit --level moderate
      continue-on-error: true

    - name: Check for known vulnerabilities
      run: |
        # Run npm audit and capture output
        if ! yarn audit --level high --json > audit-results.json; then
          echo "High or critical vulnerabilities found!"
          cat audit-results.json
          exit 1
        fi

  lint-security:
    name: Security Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Run ESLint security rules
      run: |
        # Install security-focused ESLint plugins
        yarn add --dev eslint-plugin-security @typescript-eslint/eslint-plugin
        
        # Run linting with security focus
        npx eslint . --ext .ts,.tsx --config .eslintrc.json
      continue-on-error: true

  check-secrets:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD
        extra_args: --debug --only-verified

  build-security-test:
    name: Build and Security Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Install dependencies
      run: yarn install --frozen-lockfile

    - name: Build application
      run: yarn build

    - name: Test build output for security issues
      run: |
        # Check for exposed sensitive information in build
        if grep -r "api[_-]key\|secret\|password\|token" dist/ --exclude-dir=node_modules || true; then
          echo "Warning: Potential sensitive information found in build output"
        fi
        
        # Check for proper Content Security Policy
        if [ -f "dist/index.html" ]; then
          echo "Checking for security headers in built files..."
          grep -i "content-security-policy\|x-frame-options\|x-content-type-options" dist/index.html || echo "Consider adding security headers"
        fi

  permissions-check:
    name: File Permissions Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check file permissions
      run: |
        echo "Checking for files with overly permissive permissions..."
        find . -type f -perm /o+w -not -path "./.git/*" -not -path "./node_modules/*" || true
        
        echo "Checking for executable files that shouldn't be..."
        find . -name "*.json" -o -name "*.md" -o -name "*.yml" -o -name "*.yaml" | xargs ls -l | grep '^-rwxr' || true

  package-integrity:
    name: Package Integrity Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'yarn'

    - name: Verify package integrity
      run: |
        # Check yarn.lock for integrity
        yarn install --frozen-lockfile --check-files
        
        # Verify no malicious packages (basic check)
        echo "Checking for suspicious package names..."
        if grep -E "(evil|malware|backdoor|exploit)" yarn.lock; then
          echo "Suspicious package names found!"
          exit 1
        fi
